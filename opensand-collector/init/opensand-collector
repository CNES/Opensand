#!/bin/bash
### BEGIN INIT INFO
# Provides:          opensand-collector
# Required-Start:    $remote_fs $syslog opensand-network
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Startup script for the OpenSAND collector
# Description:       This script starts a OpenSAND service and a server
#                    that listen for OpenSAND manager requests
### END INIT INFO
# -*- coding: utf-8 -*-
# Debian init.d script for OpenSAND Collector
# Written by Julien BERNARD <jbernard@toulouse.viveris.com>

DESCR="the OpenSAND Collector"
SCRIPT_NAME="$0"
PROGNAME="sand-collector"
LOGGER="/usr/bin/logger"
BIN="/usr/bin/sand-collector"
CONF="/etc/opensand/collector.conf"
PIDFILE="/var/run/sand-collector/pid"
USER="opensand"

. /lib/lsb/init-functions


# Start the server
start()
{
    log_daemon_msg "Starting ${DESCR}" "${PROGNAME}"

    # Check that executable is present
    if [ ! -x ${BIN} ] ; then
        log_failure_msg "sand-collector binary '${BIN}' not found on system"
        log_end_msg 1
        exit 1
    fi

    # Check that the configuration file is present
    if [ ! -r ${CONF} ] ; then 
        log_failure_msg "${DESCR} config file '${CONF}' was not found on system"
        log_end_msg 1
        exit 1
    fi

    # Create the PID directory
    mkdir -p /var/run/sand-collector
    chown ${USER} /var/run/sand-collector

    # Start the OpenSAND collector server
    start-stop-daemon --start --background --quiet --pidfile ${PIDFILE} --exec ${BIN} -- -c ${CONF} -p ${PIDFILE} -q 1>/dev/null 2>&1 # --chuid ${USER} --user ${USER}
    if [ $? -ne 0 ] ; then
        log_failure_msg "failed to start ${DESCR}"
        log_end_msg 1
        exit 1
    fi

    # everything went fine
    log_end_msg 0
    touch /var/lock/${PROGNAME}
}


# Stop the OpenSAND collector server
stop()
{
    log_daemon_msg "Shutting down ${DESCR}" "${PROGNAME}"

    if [ -f "$PIDFILE" ] ; then
        read PID < ${PIDFILE}
        killproc -p ${PIDFILE} ${PROGNAME}
        if [ $? -ne 0 ] ; then
            log_failure_msg "failed to stop ${DESCR}"
            log_end_msg 1
            exit 1
        fi
    else
        log_failure_msg "${PIDFILE} does not exist"
        log_end_msg 1
        exit 1
    fi

    echo "Closing connections"
    echo "Please wait..."

    # Wait for the collector to stop
    for try in $(seq 1 5) ; do
        NB=$( ps -A -o "%p" | grep -c ${PID} )
        [ ${NB} -eq 0 ] && break
        sleep 1
    done

    # Be less gentle if the collector is still running
    if [ ${NB} -ne 0 ] ; then
        # We failed to stop the collector normally
        log_failure_msg "failed to stop ${DESCR}"
        log_end_msg 1

        # Force the collector to stop
        echo -n $"Force shutting down ${DESCR}: "
        kill -9 ${PID} >/dev/null 2>&1

        # Wait for the collector to stop
        for try in $(seq 1 5) ; do
            NB=$( ps -A -o "%p" | grep -c ${PID} )
            [ ${NB} -eq 0 ] && break
            sleep 1
        done
        if [ ${NB} -ne 0 ] ; then
            log_failure_msg "${DESCR} was impossible to stop"
            log_end_msg 1
            exit 1
        fi
        rm -f ${PIDFILE}
    fi

    log_end_msg 0
    rm -f /var/lock/${PROGNAME}
}


# Stop then start the server
restart()
{
    stop
    start || exit 1
}


# Which action to perform?
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    condrestart)
        [ -e /var/lock/${PROGNAME} ] && restart
        ;;
    status)
        status_of_proc -p ${PIDFILE} ${BIN} ${PROGNAME}
        ;;
    *)
        echo "Usage $0 {start|stop|restart|condrestart|status}"
        exit 1
esac

exit 0


