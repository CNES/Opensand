#!/bin/bash

THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
IFS='/' read -ra DIR_LIST <<< "$THIS_DIR"

# Check current distribution
CURRENT=${DIR_LIST[-1]}

# Check if distribution has a "parent"
if [ -f $THIS_DIR/parent ];
then
    PARENT=`cat $THIS_DIR/parent`
fi

# Get list of all supported modules
cd $THIS_DIR
MODULES=`find . -name 'build-pkg' -printf '%h '`
if [ -v "PARENT" ]
then
    cd $THIS_DIR/../$PARENT
    MODULES=$MODULES`find . -name 'build-pkg' -printf '%h '`
fi
MODULES=`echo $(printf '%s\n' $MODULES | sort -u)`
MODULES=`sed -r 's/\.\///g' <<< $MODULES`

cd $THIS_DIR

usage()
{
    echo 'Usage : build-pkgs [-i] -s /path/to/sources -d /path/to/build <modules>'
    echo '    -i        Install the module after packaging'
    echo 'List of possible modules : '$MODULES
    exit 1
}

build()
{
    echo "Building module $MODULE for $CURRENT"
    ./build-pkg -s $SRC_DIR/$MODULE -d $DST_DIR/src/$MODULE || error
}

error()
{
    echo "Error!"
    exit 1
}

success()
{
    echo "DONE!"
}

move()
{
    # Save only deb files
    mv $DST_DIR/src/$MODULE/../*.deb $DST_DIR/pkgs 2>/dev/null
    rm -f $DST_DIR/src/$MODULE/../*.dsc
    rm -f $DST_DIR/src/$MODULE/../*.changes
    rm -f $DST_DIR/src/$MODULE/../*.tar.gz
}

clean()
{
    # Delete any remaining .deb or any files remaining from last packaging
    rm -f $DST_DIR/src/$MODULE/../*.deb
    rm -f $DST_DIR/src/$MODULE/../*.dsc
    rm -f $DST_DIR/src/$MODULE/../*.changes
    rm -f $DST_DIR/src/$MODULE/../*.tar.gz
    rm -rf $DST_DIR/src/$MODULE/*
}

install()
{
    if [ -v "INSTALL" ]
    then
        # Get list of available modules:
        DEBS=`find $DST_DIR/src/$MODULE/../ -maxdepth 1 -name '*.deb' -printf "%f "`
        IFS=' ' read -r -a DEBS_ARRAY <<< "$DEBS"
        for DEB in "${DEBS_ARRAY[@]}"
        do
            echo -n "Installing package $DEB ..."
            sudo dpkg -i $DST_DIR/src/$MODULE/../$DEB 2>&1 >$DST_DIR/src/out.log || error
            success
        done 
    fi
}

while getopts ":s:d:ih" o; do
    case "${o}" in
        s)
            SRC_DIR=`echo $OPTARG | sed 's/\/$//'`
            ;;
        d)
            DST_DIR=`echo $OPTARG | sed 's/\/$//'`
            ;;
        h)
            usage
            ;;
        i)
            INSTALL=true
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

# Make sure the script is run as root
if [ "$(id -u)" != "0" ];
then
    echo "This script must be run as root" 1>&2
    exit 1
fi

MODULE=`echo $1 | sed 's/\/$//'`

# Show usage if module is not a valid option
if [[ ! " $MODULES " =~ " $MODULE " ]]
then
    echo "Invalid module $MODULE !" && usage
fi

# Check if valid source dir
if [ ! -d "$SRC_DIR" ]
then
    echo "Invalid source dir $SRC_DIR" && usage
fi

# Create dirs if they don't exist. Empty if they do.
mkdir -p $DST_DIR/src/$MODULE
mkdir -p $DST_DIR/pkgs
clean

# Check if binary for building exists. Otherwise, fallback to parent's
if [ -f $MODULE/build-pkg ];
then
    cd $MODULE
    build
    cd ..
    install
    move
else
    if [ -v "PARENT" ];
    then
        cd $THIS_DIR/../$PARENT/$MODULE
        build
        cd $THIS_DIR
        install
        move
    else
        echo "Couldn't find any script to build $MODULE"
        exit
    fi
fi
