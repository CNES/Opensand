#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
#
# OpenSAND is an emulation testbed aiming to represent in a cost effective way a
# satellite telecommunication system for research and engineering activities.
#
#
# Copyright Â© 2011 TAS
#
#
# This file is part of the OpenSAND testbed.
#
#
# OpenSAND is free software : you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see http://www.gnu.org/licenses/.
#
#

# Author: Julien BERNARD / Viveris Technologies <jbernard@toulouse.viveris.com>

"""
opensand_daemon.py - OpenSAND daemon that wait for OpenSAND manager commands
                    and publish a OpenSAND service
"""

import socket
import sys
import signal
import threading
import thread
import os
import logging
import time
import ConfigParser
import pwd
import prctl
from optparse import OptionParser

from opensand_daemon.tcp_server import Plop
from opensand_daemon.command_handler import CommandHandler
from opensand_daemon.state_handler import StateHandler
from opensand_daemon.service import OpenSandService
from opensand_daemon.syslog_handler import SysLogHandler, syslog
from opensand_daemon.process_list import ProcessList
from opensand_daemon.nl_utils import NlAddress, NlError, NlExists

#==============================================================================
#MAIN
#==============================================================================

# macros
SERVICE = None
COMMAND = None
STATE = None

DEFAULT_CACHE=default='/var/cache/sand-daemon'

def sig_handler(signum, frame):
    """ signal handler """
    LOGGER.debug("Signal %s received" % str(signum))
        
    if SERVICE_THREAD.is_alive():
        LOGGER.debug("stop service thread")
        stop_service()
        SERVICE_THREAD.join()
        LOGGER.debug("service thread joined")
    if COMMAND_THREAD.is_alive():
        LOGGER.debug("stop command thread")
        stop_command()
        COMMAND_THREAD.join()
        LOGGER.debug("command thread joined")
    if STATE_THREAD.is_alive():
        LOGGER.debug("stop state thread")
        stop_state()
        STATE_THREAD.join()
        LOGGER.debug("state thread joined")

    if os.path.exists(PID_FILE):
        LOGGER.debug("remove PID file")
    try:
        os.remove(PID_FILE)
    except OSError, (errno, strerror):
        LOGGER.error("cannot remove PID file (%d: %s)" % (errno, strerror))
    finally:
        LOGGER.debug("quit OpenSAND Daemon")
        if signum == signal.SIGTERM:
            sys.exit(0)
        else:
            sys.exit(1)


def publish_service():
    """ publish the OpenSAND service """
    global SERVICE

    # get configuration
    name = ''
    service_type = '_opensand._tcp'
    port = ''
    instance = ''
    tools = ''
    emu_iface = ''
    emu_ipv4 = ''
    lan_iface = ''
    lan_ipv4 = ''
    lan_ipv6 = ''

    try:
        name = CONF_PARSER.get('service', 'name')
        port = CONF_PARSER.getint('service', 'port')
        if CONF_PARSER.has_option('service', 'type'):
            service_type = CONF_PARSER.get('service', 'type')
        # the port of each server
        state = CONF_PARSER.getint('state', 'port')
        command = CONF_PARSER.getint('command', 'port')
        descr = {
                    'state' : state,
                    'command' : command,
                 }
        if CACHE_DIR != DEFAULT_CACHE:
            descr['cache'] = CACHE_DIR
        if name != 'sat':
            instance = CONF_PARSER.get('service', 'instance')
            descr['id'] = instance
        config_type = CONF_PARSER.get('network', 'config_level')
        if name != 'ws':
            emu_iface = CONF_PARSER.get('network', 'emu_iface')
            emu_ipv4 = CONF_PARSER.get('network', 'emu_ipv4')
            descr['emu_iface'] = emu_iface
            descr['emu_ipv4'] = emu_ipv4

        if name != 'sat':
            lan_iface = CONF_PARSER.get('network', 'lan_iface')
            lan_ipv4 = CONF_PARSER.get('network', 'lan_ipv4')
            lan_ipv6 = CONF_PARSER.get('network', 'lan_ipv6')
            descr['lan_iface'] = lan_iface
            descr['lan_ipv4'] = lan_ipv4
            descr['lan_ipv6'] = lan_ipv6
    except ConfigParser.Error, error:
        LOGGER.error("unable to parse configuration file: " + str(error))
        thread.exit()

    if config_type == 'advanced':
        nladd = {}
        address = NlAddress()
        try:
            # if interface exists this is not an error, do not keep it in nladd
            # to avoid removing it at exit
            if name != 'sat':
                try:
                    address.add(lan_ipv4, lan_iface)
                except NlExists:
                    LOGGER.info("address %s already exists on %s" %
                                (lan_ipv4, lan_iface))
                finally:
                    nladd[lan_ipv4] = lan_iface
                try:
                    address.add(lan_ipv6, lan_iface)
                except NlExists:
                    LOGGER.info("address %s already exists on %s" %
                                (lan_ipv6, lan_iface))
                finally:
                    nladd[lan_ipv6] = lan_iface
            if name != 'ws':
                try:
                    address.add(emu_ipv4, emu_iface)
                except NlExists:
                    LOGGER.info("address %s already exists on %s" %
                                (emu_ipv4, emu_iface))
                finally:
                    nladd[emu_ipv4] = emu_iface

        except NlError, msg:
            LOGGER.error("unable to set addresses: %s" % msg)
            # delete the address that were already set
            for add in nladd:
                try:
                    address.delete(add, nladd[add])
                except:
                    continue
            thread.exit()
    # in automatic mode the addresses should have already been configured
    elif config_type != 'automatic':
        LOGGER.error("wrong configuration level: %s\n" % config_type)
        thread.exit()

    # check sysctrl values and log if the value may lead to errors
    if name != 'ws':
        if name != 'sat':
            for iface in [emu_iface, lan_iface]:
                with open("/proc/sys/net/ipv4/conf/%s/forwarding" % iface, 'ro') \
                     as sysctrl:
                    if sysctrl.read().rstrip('\n') != "1":
                        LOGGER.warning("IPv4 forwarding on interface %s is "
                                       "disabled, you won't be able to route "
                                       "packets toward WS behind this host" %
                                       iface)
            for iface in [lan_iface]:
                with open("/proc/sys/net/ipv6/conf/%s/forwarding" % iface, 'ro') \
                     as sysctrl:
                    if sysctrl.read().rstrip('\n') != "1":
                        LOGGER.warning("IPv6 forwarding on interface %s is "
                                       "disabled, you won't be able to route "
                                       "packets toward WS behind this host" %
                                       iface)
            with open("/proc/sys/net/ipv4/ip_forward", 'ro') as sysctrl:
                if sysctrl.read().rstrip('\n') != "1":
                    LOGGER.warning("IPv4 ip_forward is disabled, you should enable "
                                   "it")
        for val in ["wmem_max", "rmem_max", "wmem_default", "rmem_default"]:
            with open("/proc/sys/net/core/%s" % val, 'ro') as sysctrl:
                if int(sysctrl.read().rstrip('\n')) < 1048580:
                    LOGGER.warning("%s should be set to a value greater than "
                                   "1048580 in order to support high bitrates "
                                   "through OpenSAND" % val)

    # do not raise an error for the following fields because they are not
    # used on each host
    # add supported tools
    try:
        tools = CONF_PARSER.get('service', 'tools')
    except ConfigParser.Error:
        pass
    else:
        # tools section found, add the information to description
        descr['tools'] = tools.replace(',', ' ').replace(';', ' ').replace(':', ' ')

    # add supported plugins
    try:
        tools = CONF_PARSER.get('service', 'modules')
    except ConfigParser.Error:
        pass
    else:
        # modules section found, add the information to description
        descr['modules'] = tools.replace(',', ' ').replace(';', ' ').replace(':', ' ')

    if name != 'gw' and name != 'sat' and name != 'st' and name != 'ws':
        LOGGER.error("wrong name parameter: %s; sat, gw, st or ws accepted" % name)
        thread.exit()

    SERVICE = OpenSandService(CACHE_DIR, service_type, name, instance, port, descr)

    try:
        SERVICE.run()
    except Exception, error:
        LOGGER.error("exception when running service " + str(error))
        SERVICE = None
        thread.exit()
    finally:
        if STATE.RequestHandlerClass._running:
            return
        # remove addresses only if OpenSAND is not running
        for add in nladd:
            try:
                address.delete(add, nladd[add])
            except:
                continue


def stop_service():
    """ stop the OpenSAND service """
    if SERVICE is not None:
        SERVICE.stop()

def start_command():
    """ start the OpenSAND daemon server which will receive manager commands """
    global COMMAND

    # get configuration
    port = ''
    try:
        port = CONF_PARSER.getint('command', 'port')
    except ConfigParser.Error, error:
        LOGGER.error("unable to parse configuration file: " + str(error))
        thread.exit()

    # Create the command server
    try:
        COMMAND = Plop(('0.0.0.0', port), CommandHandler)
    except socket.error, (errno, strerror):
        LOGGER.error("cannot create server ('%d: %s')" % (errno, strerror))
        thread.exit()

    LOGGER.info("listen on 0.0.0.0:" + str(port))

    try:
        COMMAND.run()
    except Exception, error:
        LOGGER.error("exception when running server " + str(error))
        COMMAND = None
        thread.exit()

def stop_command():
    """ stop the OpenSAND daemon server """
    if COMMAND is not None:
        COMMAND.stop()

def start_state():
    """ start the OpenSAND daemon state server
        which will send component status to manager """
    global STATE

    # get configuration
    port = ''
    try:
        port = CONF_PARSER.getint('state', 'port')
    except ConfigParser.Error, error:
        LOGGER.error("unable to parse configuration file: " + str(error))
        thread.exit()

    # Create the state server
    try:
        STATE = Plop(('0.0.0.0', port), StateHandler)
    except socket.error, (errno, strerror):
        LOGGER.error("cannot create server ('%d: %s')" % (errno, strerror))
        thread.exit()

    LOGGER.info("listen for states on 0.0.0.0:" + str(port))

    try:
        STATE.run()
    except Exception, error:
        LOGGER.error("exception when running server " + str(error))
        STATE = None
        thread.exit()


def stop_state():
    """ stop the OpenSAND daemon state server """
    if STATE is not None:
        STATE.stop()

def write_pid(pid):
    """ write the PID file """
    # everything went fine, write the PID of the child
    LOGGER.debug("write PID: " + str(pid))
    try:
        PID = open(PID_FILE, "wb")
        PID.write(str(pid))
    except IOError, (errno, strerror):
        LOGGER.error("cannot write PID file (%d: %s) : quit" %
                     (errno, strerror))
        os.kill(pid, signal.SIGUSR2)
        sys.exit(1)
    else:
        PID.close()


def start_daemon():
    """ start the daemon """
    # set user id to opensand and only keep CAP_NET_ADMIN capabilities
    try:
        pw = pwd.getpwnam("opensand")
        uid = pw.pw_uid
        prctl.cap_inheritable.net_admin = True
        prctl.set_keepcaps(True)
        os.setuid(uid)
        prctl.cap_inheritable.limit('CAP_NET_ADMIN')
        prctl.cap_effective.limit('CAP_NET_ADMIN')
        prctl.cap_permitted.limit('CAP_NET_ADMIN')
        prctl.cap_effective.net_admin = True
    except KeyError:
        LOGGER.ERROR("cannot find opensand user")
        try:
            os.remove(PID_FILE)
        except OSError, (errno, strerror):
            LOGGER.error("cannot remove PID file (%d: %s)" %
                         (errno, strerror))
        sys.exit(1)


    # start the threads
    try:
        LOGGER.debug("start service thread")
        SERVICE_THREAD.start()
        LOGGER.debug("start command thread")
        COMMAND_THREAD.start()
        LOGGER.debug("start state thread")
        STATE_THREAD.start()
    except thread.error, msg:
        LOGGER.error("exception when starting the threads: " + msg)
        if(os.path.exists(PID_FILE) == True):
            LOGGER.debug("remove PID file")
            try:
                os.remove(PID_FILE)
            except OSError, (errno, strerror):
                LOGGER.error("cannot remove PID file (%d: %s)" %
                             (errno, strerror))
        sys.exit(1)

    # wait that threads are correctly started
    time.sleep(2)

    if not SERVICE_THREAD.is_alive():
        LOGGER.error("service thread is not started correctly: quit")
        sig_handler(signal.SIGUSR2, None)
    if not COMMAND_THREAD.is_alive():
        LOGGER.error("command thread is not started correctly: quit")
        sig_handler(signal.SIGUSR2, None)
    if not STATE_THREAD.is_alive():
        LOGGER.error("state thread is not started correctly: quit")
        sig_handler(signal.SIGUSR2, None)


if __name__ == "__main__":

    #Get new PID file path (if specified)
    opt_parser = OptionParser()
    opt_parser.add_option("-c", "--conf", dest="conf",
                          default='/etc/opensand/daemon.conf',
                          action="store",
                          help="Specify the configuration file")
    opt_parser.add_option("-p", "--pid", dest="pid",
                          default='/var/run/sand-daemon/pid',
                          action="store",
                          help="Specify the file to save sand-daemon PID, "
                          "use this option carefully !")
    opt_parser.add_option("-t", "--cache", dest="cache",
                          default='/var/cache/sand-daemon',
                          action="store",
                          help="Specify the folder for cache files, "
                          "use this option carefully !")
    opt_parser.add_option("-f", "--foreground", dest="foreground",
                          default=False,
                          action="store_true",
                          help="Start daemon in foreground")
    opt_parser.add_option("-v", "--verbose", dest="verbose",
                          default=False,
                          action="store_true",
                          help="Print more information")
    opt_parser.add_option("-d", "--debug", dest="debug",
                          default=False,
                          action="store_true",
                          help="Print debug")
    opt_parser.add_option("-q", "--quiet", dest='quiet',
                          default=False,
                          action="store_true",
                          help="Stop printing logs in console")

    (options, args) = opt_parser.parse_args()
    PID_FILE = options.pid
    CONF_FILE = options.conf
    CACHE_DIR = os.path.abspath(options.cache)
        
    process_list = ProcessList()
    process_list.set_cache_dir(CACHE_DIR)

    # Logging configuration
    LOGGER = logging.getLogger('sand-daemon')
    LOG_HANDLER = SysLogHandler('sand-daemon', syslog.LOG_PID,
                                 syslog.LOG_DAEMON)
    LOGGER.addHandler(LOG_HANDLER)

    # Print logs in terminal for debug
    if not options.quiet:
        LOG_HANDLER = logging.StreamHandler(sys.stdout)
        FORMATTER = logging.Formatter("%(asctime)s - %(name)s - %(levelname)-5s "
                                      "- %(message)-50s [%(filename)s:%(lineno)d]")
        LOG_HANDLER.setFormatter(FORMATTER)
        LOGGER.addHandler(LOG_HANDLER)

    LOGGER.setLevel(logging.WARNING)
    if options.debug:
        LOGGER.setLevel(logging.DEBUG)
    elif options.verbose:
        LOGGER.setLevel(logging.INFO)

    # Get configuration file
    if(os.path.exists(CONF_FILE) == False):
        LOGGER.error("configuration file '%s' does not exists" % CONF_FILE)
        sys.exit(1)

    CONF_PARSER = ConfigParser.SafeConfigParser()
    # read configuration file
    if len(CONF_PARSER.read(CONF_FILE)) == 0:
        LOGGER.error("configuration file %s does not exist" % CONF_FILE)
        sys.exit(1)

    # create the OpenSAND service thread
    SERVICE_THREAD = threading.Thread(None, publish_service, None, (), {})

    # create the server which receives OpenSAND manager commands
    COMMAND_THREAD = threading.Thread(None, start_command, None, (), {})

    # create the server which check binaries states and send them
    STATE_THREAD = threading.Thread(None, start_state, None, (), {})

    # check that the PID file does not exists
    if os.path.exists(PID_FILE):
        LOGGER.error("PID file already exists: quit")
        sys.exit(1)

    # catch SIGTERM signal
    signal.signal(signal.SIGTERM, sig_handler)
    signal.signal(signal.SIGUSR2, sig_handler)

    # foreground
    if options.foreground:
        write_pid(os.getpid())
        start_daemon()
        # wait for SIGTERM
        try:
            signal.pause()
        except KeyboardInterrupt:
            sig_handler(signal.SIGTERM, None)

    # background
    else:
        try:
            CHILD_PID = os.fork()
        except OSError, (errno, strerror):
            LOGGER.error("cannot fork (%d: %s) : quit" % (errno, strerror))
            sys.exit(1)

        if(CHILD_PID == 0):
            # wait that father write the PID
            time.sleep(2)
            start_daemon()
            # wait for SIGTERM
            signal.pause()
        else:
            write_pid(CHILD_PID)
            sys.exit(0)

    sig_handler(signal.SIGUSR2, None)


