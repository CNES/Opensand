#!/bin/bash

#
#
# OpenSAND is an emulation testbed aiming to represent in a cost effective way a
# satellite telecommunication system for research and engineering activities.
#
#
# Copyright Â© 2012 TAS
#
#
# This file is part of the OpenSAND testbed.
#
#
# OpenSAND is free software : you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see http://www.gnu.org/licenses/.
#
#

THIS_SCRIPT=$(basename $0)
CMD=$1

#
# This script is used to initialize the OpenSAND network on WS
#
# Authors Julien Bernard <julien.bernard@toulouse.viveris.com>

# Source debconf library.
. /usr/share/debconf/confmodule

# The DHCP client command concatenated with interface name to automatically set
# up the address when DHCP is enabled
DHCP_CLIENT_CMD="dhclient "
if [ -f /etc/default/opensand-network ]; then
    . /etc/default/opensand-network
fi

DAEMON_CONF="/etc/opensand/daemon.conf"

# load the configuration file
ws_config(){
    echo "# Configuring $NAME"

    # load debconf parameters
    db_get opensand-daemon/network/lan_iface
    export LAN_IFACE=$RET
    db_get opensand-daemon/network/dhcp
    export DHCP=$RET

    # activate the interfaces
    activate_interfaces

    db_get opensand-daemon/network/config_level
    config=$RET
    if [ "$config" = "ADVANCED" -a "$DHCP" = "false" ]; then
        db_get opensand-daemon/network/lan_ipv4
        export LAN_IPV4=$RET
        db_get opensand-daemon/network/lan_ipv6
        export LAN_IPV6=$RET
    else
        if [ "$DHCP" != "false" ]; then
        	echo "Starting DHCP client '$DHCP_CLIENT_CMD $LAN_IFACE'"
            $DHCP_CLIENT_CMD $LAN_IFACE 1>/dev/null 2>&1
            db_get opensand-daemon/network/lan_ipv6
            export LAN_IPV6=$RET
        fi
        export LAN_IPV4=`ip addr show ${LAN_IFACE} | grep -o -e "inet [^ ]*" | \grep -o -e "[^ ]*$"`
        if [ -z "$LAN_IPV6" ]; then
            export LAN_IPV6=`ip addr show ${LAN_IFACE} | grep global | grep -o -e "inet6 [^ ]*" | grep -o -e "[^ ]*$"`
        fi
        if [ -z "$LAN_IPV4" ]; then
            halt_on_error "cannot retrieve ${LAN_IFACE} IPv4 address, please select ADVANCED mode, assign an address or correctly configure your DHCP parameters"
        fi
        if [ -z "$LAN_IPV6" ]; then
            halt_on_error "cannot retrieve ${LAN_IFACE} IPv6 address, please select ADVANCED mode or assign an address"
        fi
        echo "lan_iface = ${LAN_IFACE}" >> ${DAEMON_CONF}
        echo "lan_ipv4 = ${LAN_IPV4}" >> ${DAEMON_CONF}
        echo "lan_ipv6 = ${LAN_IPV6}" >> ${DAEMON_CONF}
    fi

    # sanity check
    for addr in $LAN_IPV4 $LAN_IPV6; do
        echo $addr | grep -q "/"
        ret=$?
        if [ "$ret" != "0" ]; then
            halt_on_error "please add mask in network address $addr"
        fi
    done
}


# Print a short help message
#
usage(){
    echo "This script is used to set up static network configuration for opensand platform"
    echo "Usage: $THIS_SCRIPT <command>"
    echo "    with   <command> is one among"
    echo "        CONF    configure the network"
    echo "        CHECK   show the network configuration"
    echo "        RESET   blank the network configuration"
    echo
    return
}

halt_on_error(){
    echo "ERROR (FATAL): $*"  >&2
    echo "" >&2
    db_stop
    exit 1
}

# Print the command to be run, then run it.
# Exit if status !=0
#
evecho(){
    echo $*
    eval $*
    my_status=$?
    [ $my_status -ne 0 ] && echo "WARNING: last command returned an error ($*)" >&2

    return $my_status
}

# Check if the user running this script is root.
# Exit if not
#
check_root(){
    id | grep -q '^uid=0(root)'
    retstat=$?
    [ $retstat -ne 0 ] && halt_on_error "you _must_ be root before executing $THIS_SCRIPT"
    return
}

# Print the network configuration
#
check_conf(){
    /sbin/ifconfig -a
    /sbin/ip route
    /sbin/ip -6 route

    return
}


# Configure the interfaces
activate_interfaces(){
    echo "Set $LAN_IFACE up"
    evecho /sbin/ifconfig $LAN_IFACE up || halt_on_error "cannot set $LAN_IFACE up"

    return
}


# Configure st router
#
# Now the work can begin
#

check_root

echo "# Configure OpenSAND network for WS"
case $CMD in
     CONF )
         ws_config
     ;;
     CHECK )
         check_conf
     ;;
     RESET )
     ;;
     *)
        echo "Error: unknown command $CONF"
        usage
        db_stop
        exit 1
    ;;
esac

db_stop
exit 0
