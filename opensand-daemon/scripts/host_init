#!/bin/bash

#
#
# OpenSAND is an emulation testbed aiming to represent in a cost effective way a
# satellite telecommunication system for research and engineering activities.
#
#
# Copyright Â© 2015 TAS
#
#
# This file is part of the OpenSAND testbed.
#
#
# OpenSAND is free software : you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see http://www.gnu.org/licenses/.
#
#

THIS_SCRIPT=$(basename $0)

#
# This script is used to initialize the OpenSAND
# sysctl parameters and DHCP configuration on host
#
# Authors Julien Bernard <julien.bernard@toulouse.viveris.com>

# Source debconf library.
. /usr/share/debconf/confmodule

# this value is overrided if default library is sourced
SYSCTL="true"

# Forwarding: necessary to be able to forward satellite trafic toward
# workstations
IP_FORWARD="1"
FORWARDING="1"

# Source default library
if [ -f /etc/default/opensand-daemon ]; then
    . /etc/default/opensand-daemon
fi
TUN0_IFACE="opensand_tun"

DHCP_CONFIG_FILE="/etc/dnsmasq.d/lan_st.conf"
DAEMON_CONF="/etc/opensand/daemon.conf"

# load the configuration file
load_conf(){
    # load debconf parameters
    db_get opensand-daemon/service/name
    RET=`echo $RET | tr 'A-Z' 'a-z'`
    if [ ${RET} = 'st' ]; then
        db_get opensand-daemon/service/st_instance
        export NAME='ST'$RET
    elif [ ${RET} = 'sat' ]; then
        export NAME='SAT'
        return
    elif [ ${RET} = 'ws' ]; then
        db_get opensand-daemon/service/st_instance
        export NAME='WS'$RET
    elif [ ${RET} = 'gw' ]; then
        db_get opensand-daemon/service/st_instance
        export NAME='GW'$RET
    elif [ ${RET} = 'gw-net-acc' ]; then
        db_get opensand-daemon/service/st_instance
        export NAME='GW-NET-ACC'$RET
    elif [ ${RET} = 'gw-phy' ]; then
        db_get opensand-daemon/service/st_instance
        export NAME='GW-PHY'$RET
    fi

    db_get opensand-daemon/network/lan_iface
    export LAN_IFACE=$RET

    db_get opensand-daemon/network/dhcp
    export DHCP=$RET
}

halt_on_error(){
    echo "ERROR (FATAL): $*"  >&2
    echo "" >&2
    db_stop
    exit 1
}

# Print the command to be run, then run it.
# Exit if status !=0
#
evecho(){
    echo $*
    eval $*
    my_status=$?
    [ $my_status -ne 0 ] && echo "WARNING: last command returned an error ($*)" >&2

    return $my_status
}

# Check if the user running this script is root.
# Exit if not
#
check_root(){
    id | grep -q '^uid=0(root)'
    retstat=$?
    [ $retstat -ne 0 ] && halt_on_error "you _must_ be root before executing $THIS_SCRIPT"
    return
}

# Configure sysctl
set_sysctl(){
    db_get opensand-daemon/network/emu_iface
    EMU_IFACE=$RET

    # enable forwarding
    echo "Set ip_forward=$IP_FORWARD"
    evecho /sbin/sysctl -w "net/ipv4/ip_forward"=$IP_FORWARD
    echo -n  "Set forwarding=$FORWARDING on "
    echo "$EMU_IFACE, $LAN_IFACE and $TUN0_IFACE interfaces"
    evecho /sbin/sysctl -w "net/ipv4/conf/$EMU_IFACE/forwarding"=$FORWARDING
    evecho /sbin/sysctl -w "net/ipv4/conf/$LAN_IFACE/forwarding"=$FORWARDING
    evecho /sbin/sysctl -w "net/ipv4/conf/$TUN0_IFACE/forwarding"=$FORWARDING
    # if the IPv6 address does not exist we cannot change forwarding so apply it on all/default
    evecho /sbin/sysctl -w "net/ipv6/conf/all/forwarding"=$FORWARDING
    evecho /sbin/sysctl -w "net/ipv6/conf/default/forwarding"=$FORWARDING
    evecho /sbin/sysctl -w "net/ipv6/conf/$TUN0_IFACE/forwarding"=$FORWARDING
}

set_sysctl_phy(){
    db_get opensand-daemon/network/emu_iface
    EMU_IFACE=$RET

    # enable forwarding
    echo "Set ip_forward=$IP_FORWARD"
    evecho /sbin/sysctl -w "net/ipv4/ip_forward"=$IP_FORWARD
    echo -n  "Set forwarding=$FORWARDING on "
    echo "$EMU_IFACE interfaces"
    evecho /sbin/sysctl -w "net/ipv4/conf/$EMU_IFACE/forwarding"=$FORWARDING
    # if the IPv6 address does not exist we cannot change forwarding so apply it on all/default
    evecho /sbin/sysctl -w "net/ipv6/conf/all/forwarding"=$FORWARDING
    evecho /sbin/sysctl -w "net/ipv6/conf/default/forwarding"=$FORWARDING
}

set_sysctl_net_acc(){
    # enable forwarding
    echo "Set ip_forward=$IP_FORWARD"
    evecho /sbin/sysctl -w "net/ipv4/ip_forward"=$IP_FORWARD
    echo -n  "Set forwarding=$FORWARDING on "
    echo "$TUN0_IFACE and $LAN_IFACE interfaces"
    evecho /sbin/sysctl -w "net/ipv4/conf/$LAN_IFACE/forwarding"=$FORWARDING
    evecho /sbin/sysctl -w "net/ipv4/conf/$TUN0_IFACE/forwarding"=$FORWARDING
    # if the IPv6 address does not exist we cannot change forwarding so apply it on all/default
    evecho /sbin/sysctl -w "net/ipv6/conf/all/forwarding"=$FORWARDING
    evecho /sbin/sysctl -w "net/ipv6/conf/default/forwarding"=$FORWARDING
    evecho /sbin/sysctl -w "net/ipv6/conf/$TUN0_IFACE/forwarding"=$FORWARDING
}

set_tun_sysctl(){
    # enable forwarding
    echo "Set forwarding=$FORWARDING on $TUN0_IFACE inteface"
    evecho /sbin/sysctl -w "net/ipv4/conf/$TUN0_IFACE/forwarding"=$FORWARDING
    evecho /sbin/sysctl -w "net/ipv6/conf/$TUN0_IFACE/forwarding"=$FORWARDING

    return
}

# load the configuration file
load_net_config(){
    # load lan IPv4 configuration for DHCP configuration file
    db_get opensand-daemon/network/config_level
    config=`echo $RET | tr 'A-Z' 'a-z'`
    if [ "$config" != "automatic" ]; then
        db_get opensand-daemon/network/lan_ipv4
        LAN_IPV4=$RET
    else
        LAN_IPV4=`ip addr show ${LAN_IFACE} | grep -o -e "inet [^ ]*" | \grep -o -e "[^ ]*$"`
        LAN_IPV4=`echo ${LAN_IPV4} | cut -f 1 -d ' '`
        if [ -z "$LAN_IPV4" ]; then
            halt_on_error "cannot retrieve ${LAN_IFACE} IPv4 address, please select ADVANCED mode or assign an address"
        fi
    fi

    # sanity check
    if [ -z $LAN_IPV4 ]; then
    	halt_on_error "the IPv4 lan address is empty"
    fi
    
    echo $LAN_IPV4 | grep -q "/"
    ret=$?
    if [ "$ret" != "0" ]; then
        halt_on_error "please add mask in network address $addr"
    fi

    export LAN4=${LAN_IPV4%/*}
    export MASK4=${LAN_IPV4##*/}
}


set_dhcp_server(){
    # check if DHCP server is enabled
    if [ "$DHCP" != "true" ]; then
        return
    fi

    # chekc if the file already exists
    if [ -f ${DHCP_CONFIG_FILE} ]; then
        return
    fi 
    echo "# Create the DHCP server configuration file ${DHCP_CONFIG_FILE}"
    load_net_config

    full_octets=$(($MASK4/8))
    local partial_octet=$(($MASK4%8))
    mask=""

    for i in `seq 1 4`; do
        if [ $i -lt $full_octets ]; then
            mask+=255
        elif [ $i -eq $full_octets ]; then
            mask+=$((256 - 2**(8-$partial_octet)))
        else
            mask+=0
        fi
        test $i -lt 4 && mask+=.
    done

    if [ ${MASK4} -gt 27 ]; then
        echo "mask is too high, please configure DHCP manually"
        return
    elif [ ${MASK4} -gt 24 ]; then
        min=$((256 - 2**(32-${MASK4})))
    else
        min=0
    fi

    # range is at least based on mask /24 for more simplicity and limited to 10 hosts
    if [ ${LAN4##*.} -gt $((min+20)) ]; then
        range_start=${LAN4%.*}.$((min+10))
        range_end=${LAN4%.*}.$((min+19))
    else
        range_start=${LAN4%.*}.$((min+21))
        range_end=${LAN4%.*}.$((min+30))
    fi

    subnet=${LAN4%.*}
    subnet+=.0
    if [ ${MASK4} -gt 24 ]; then
        cidr=24
    elif [ ${MASK4} -gt 16 ]; then
        subnet=${subnet%.*}
        subnet+=".0"
        cidr=16
    else
        subnet=${subnet%.*}
        subnet=${subnet%.*}
        subnet+=".0"
        subnet+=".0"
        cidr=8
    fi


    opt3="dhcp-option=3"
    db_get opensand-daemon/network/default_route
    if [ $RET = "true" ]; then
        opt3="#dhcp-option=3"
    fi

    /bin/cat 2>/dev/null << EOF > "${DHCP_CONFIG_FILE}"

# IP range
dhcp-range=${range_start},${range_end},${mask},1h
# interface name
interface=${LAN_IFACE}
# add classless-static-routes option to configure an automatic static route
# 121 is the code for classless-static-routes
# Be careful, we assume that the mask for all STs is your ST lan maks is the
# previous mask being a power of 2 (e.g. /16 for mask from /17 to /24), if this
# is not the case please modify it
# If the STs are not on a same subnetwork please do no use this option and set
# your routes manually or use the daemon
dhcp-option=121,${subnet}/${cidr},${LAN4}
# Override the default route supplied by dnsmasq and send no default
# route at all. Note that this only works for the options sent by
# default (1, 3, 6, 12, 28) the same line will send a zero-length option
# for all other option numbers.
${opt3}

EOF

    if [ $? -ne 0 ] ; then
        # not an error, this is only an exemple so it is not fatal
        echo "Failed to write DHCP range to DHCP config file"
    else
        echo "# Please check the configuration, and restart your DHCP server"
    fi
}

set_dhcp_client(){
    if [ "$DHCP" != "false" ]; then
        echo "Starting DHCP client"
        evecho $DHCP_CLIENT_CMD $LAN_IFACE 1>/dev/null
    fi
}

# Configure opensand host
config(){
    echo "# Configuring $NAME"

    if [ ${NAME:0:2} = 'WS' ]; then
        set_dhcp_client
        return
    fi

    if [ ${SYSCTL} = "true" -a ${NAME} != 'SAT' ]; then
        echo "# Configuring sysctl"
        echo "  See /etc/default/opensand-daemon to avoid this modifications"
        if [[ $NAME = GW-PHY* ]]; then
            set_sysctl_phy
        elif [[ $NAME = GW-NET-ACC* ]]; then
            set_sysctl_net_acc
        else
            set_sysctl
        fi
    fi
    if [[ $NAME != SAT && $NAME != GW-PHY* ]]; then
        echo "# Configuring sysctl for TUN interface"
        set_tun_sysctl
    fi

    set_dhcp_server
    return
}

#
# Now the work can begin
#

check_root

echo "# Configure OpenSAND sysctl and/or DHCP"
load_conf
config
db_stop
exit 0
