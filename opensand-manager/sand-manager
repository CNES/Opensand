#!/usr/bin/env python2
# -*- coding: utf-8 -*-

#
#
# OpenSAND is an emulation testbed aiming to represent in a cost effective way a
# satellite telecommunication system for research and engineering activities.
#
#
# Copyright Â© 2013 TAS
#
#
# This file is part of the OpenSAND testbed.
#
#
# OpenSAND is free software : you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see http://www.gnu.org/licenses/.
#
#

# Author: Julien BERNARD / <jbernard@toulouse.viveris.com>

"""
opensand_manager.py - The OpenSAND Manager main thread
"""

import traceback
import sys
import gtk
import gobject
from optparse import OptionParser

from opensand_manager_core.opensand_model import Model
from opensand_manager_core.opensand_controller import Controller
from opensand_manager_core.loggers.manager_log import ManagerLog
from opensand_manager_gui.opensand_view import View
from opensand_manager_gui.view.popup.infos import error_popup
from opensand_manager_gui.env_plane_dispatcher import EnvPlaneDispatcher

# TODO add option load plugin from another directory if it is possible ?
# TODO replace optparser by argparse if 2.6 support is abandonned
class OpenSandManager:
    """ the OpenSAND Manager initialization class """
    def __init__(self, print_debug = False, enable_std = True,
                 enable_syslog = False):
        # enable multithreading in GTK
        gtk.gdk.threads_init()
        # enable python threading in gobject
        gobject.threads_init()

        self._manager_log = None

        self._model = None
        self._controller = None
        self._view = None

        ### parse options

        opt_parser = OptionParser()
        opt_parser.add_option("-q", "--quiet", action="store_false",
                              dest="std", default=True,
                              help="stop printing messages in console")
        opt_parser.add_option("-v", "--verbose", action="store_true",
                              dest="debug", default=False,
                              help="enable debug messages")
        opt_parser.add_option("-f", "--with-syslog", action="store_true",
                               dest="syslog", default=False,
                               help="enable syslog")
        opt_parser.add_option("-g", "--with-glade", dest="glade", default='',
                              help="use the specified glade file to load UI")
        opt_parser.add_option("-s", "--scenario", dest="scenario", default='',
                              help="open or create the specified scenario")
        opt_parser.add_option("-t", "--service-type", dest="service_type",
                              default='_opensand._tcp',
                              help="listen for OpenSAND entities on the \
                              specified service type with format: \
                              _name._transport_protocol")
        opt_parser.add_option("-d", "--enable-dev-mode", action="store_true",
                              dest="dev_mode", default=False,
                              help="enable developer mode")
        opt_parser.add_option("-i", "--interactive", action="store_true",
                              dest="interactive", default=False,
                              help="create a server that listen for distants command \
                              among {START, STOP}")

        (options, args) = opt_parser.parse_args()

        ### create the logger

        # Create the log View that logs manager events in main window
        # Also enable printing in standard output and or in syslog file
        lvl = 'info'
        if options.debug:
            lvl = 'debug'
        self._manager_log = ManagerLog(lvl, options.std, True, options.syslog)

        ### create the MVC

        try:
            # create the OpenSAND model
            self._model = Model(self._manager_log, options.scenario)

            # create the View
            self._view = View(self._model, self._manager_log,
                              options.glade, options.scenario, options.dev_mode,
                              options.service_type)

            # create the host controller and response manager
            self._controller = Controller(self._model, options.service_type,
                                          self._manager_log, options.interactive)
            
            EnvPlaneDispatcher(self._controller.get_env_plane_controller(),
					           self._view)
            
        except Exception, msg :
            self._manager_log.error("failed to initialize OpenSAND Manager: " +
                                    str(msg))
            import os
            import traceback
            traceback.print_exc()
            error_popup("Failed to initialize OpenSAND Manager", str(msg))
            os._exit(1)
	    #if self._view is not None:
            #    self._view.run()
            #raise

    def go(self):
        """ launch OpenSAND Manager """
        self._manager_log.debug("start main loop")
        try:
            self._controller.start()
            self._view.run()
            self._manager_log.debug("Main Loop: stop")
        except KeyboardInterrupt:
            self._view.exit_kb()
        except:
            raise
        finally:
            self.close()
            self._manager_log.debug("Main Loop: stopped")

    def close(self):
        """ Close OpenSAND Manager """
        # model is closed in view
        # view is closed by user
        # controller is close by model with event set to quit
        self._manager_log.debug("Main Loop: join controller")
        self._controller.join()
        self._manager_log.debug("Main Loop: controller joined")


### MAIN ###
try:
    VERSION =  gtk.check_version(2, 16, 0)
    if VERSION is not None:
        print "Bad GTK version (< 2.16.0): " + VERSION
    MANAGER = OpenSandManager()
    MANAGER.go()
    sys.exit(0)
except Exception, MSG:
    traceback.print_tb(sys.exc_info()[2])
    print "\nException in OpenSAND manager: " + str(MSG)
    sys.exit(1)

