# -*- coding: utf-8 -*-

"""
env_plane_dispatcher.py - Dispatch events generated by the environment plane
model
"""

class EnvPlaneDispatcher(object):
    """
    Environment plane dispatcher object
    """

    def __init__(self, controller, opensand_view):
        self._event_notebook = None
        self._controller = controller
        self._opensand_view = opensand_view
        
        controller.set_observer(self)

    
    def program_list_changed(self):
        """
        The controller reported that the program list has changed
        """
    
        if not self._opensand_view:
            return
    
        programs = {}
        for program in self._controller.get_programs():
            programs[program.ident] = program
        
        self._opensand_view.on_program_list_changed(programs)
    
    def new_probe_value(self, probe, time, value):
        """
        The controller reported a new probe value
        """
    
        if not self._opensand_view:
            return
    
        self._opensand_view.on_new_probe_value(probe, time, value)
    
    def new_event(self, program, name, level, message):
        """
        The controller reported a new event
        """
        
        if not self._opensand_view:
            return
    
        self._opensand_view.on_new_program_event(program, name, level, message)
    