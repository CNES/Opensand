<html>
<head>
<title>Document sans-titre</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body bgcolor="#FFFFFF">
<table width="100%" border="0">
  <tr bgcolor="#52799e"> 
    <td><img src="icon/small_tri_right.gif" width="15" height="14"><font face="Arial, Helvetica, sans-serif"><b><font color="#FFFFFF">Functional 
      : Runtime</font></b></font></td>
  </tr>
</table>
<table width="100%" border="0">
  <tr>
    <td><b><font face="Arial, Helvetica, sans-serif"><br>
      </font></b></td>
  </tr>
  <tr>
    <td>
      <table width="100%" border="0">
        <tr>
          <td width="4%"><img src="icon/pad.gif" width="1" height="1"></td>
          <td width="96%" valign="top" align="left">This document describes the 
            runtime architecture.</td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table width="100%" border="0">
  <tr> 
    <td> <b><font face="Arial, Helvetica, sans-serif"><br>
      <font size="4">I/ About the Runtime</font></font></b></td>
  </tr>
  <tr> 
    <td> 
      <table width="100%" border="0">
        <tr> 
          <td width="4%"><img src="icon/pad.gif" width="1" height="1"></td>
          <td width="96%" valign="top" align="left" bordercolor="#00FF00"> 
            <p>The main objective of the runtime is to provide a platform independant 
              event based framework with advanced features:<br>
              It thus provides basic message files, timers, and thread management 
              functionnalities with alot of traces.<br>
              Advanced features are available too, such as dynamic message routing, 
              state management, remote debugging, message marshaller generation, 
              or transparent distribution of blocs across a network</p>
            <table width="100%" border="0">
              <tr valign="top"> 
                <td> 
                  <p>Advanced features are available thanks to an architectures 
                    based on 3 component types:<br>
                    - Event manager<br>
                    - Bloc manager<br>
                    - Blocs</p>
                  <p>Those components are detailed here after.</p>
          </td>
                <td align="right"><img src="icon/schemas_runtime.png" width="291" height="315"></td>
              </tr>
            </table>
            
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table width="100%" border="0">
  <tr> 
    <td> <b><font face="Arial, Helvetica, sans-serif"><br>
      <font size="4">II/ Components</font></font></b></td>
  </tr>
  <tr> 
    <td> 
      <table width="100%" border="0">
        <tr> 
          <td width="4%"><img src="icon/pad.gif" width="1" height="1"></td>
          <td width="96%" valign="top" align="left"> 
            <p><font face="Arial, Helvetica, sans-serif" size="4">1/ Event manager</font></p>
            <p> As one can guess the Event manager centralizes the events of a 
              system.</p>
            <p>It is as close to the target system as possible to make use of 
              optimised system features for thread synchronisation and message 
              boxes. <br>
              Depending on system, it implements time management features for 
              :<br>
              - real-time systems.<br>
              - compressed-time : the system clock runs faster or slower than 
              the real-time clock.<br>
              - event triggered-time : the clock automatically jump to the next 
              event expiration time.<br>
            </p>
            <p>Two memory policies are available:<br>
              - dynamic memory allocation thanks classical malloc function<br>
              - pre-allocation of memory pools than make possible to debug on 
              a windows system with small memory pools than target an embedded 
              syetm with limited memory, thanks usefull statistics on memory used.<br>
              <br>
              If the system supports sockets the Event manager can manage the 
              socket events. This allows the developement of a whole asynchonous 
              sytem with socket events in a single thread.<br>
            </p>
            <p>&nbsp;</p>
            <p><font face="Arial, Helvetica, sans-serif" size="4">2/ Bloc manager</font></p>
            <p>A bloc manager as its name could suggest owns a pool of blocs, 
              and dispatchs the events from its attached Event manager to those 
              blocs.<br>
            </p>
            <p>Message exchanges between blocs are based on:<br>
              - direct destination bloc addressing.<br>
              - upper/lower bloc addressing.<br>
              - dynamic message routing functionnalities thanks a routing table 
              involving link and diffusion group between blocs.<br>
            </p>
            <p>The Bloc manager provides remote debugging facilities and traces.</p>
            <p>&nbsp;</p>
            <p><font face="Arial, Helvetica, sans-serif" size="4">3/ Blocs</font></p>
            <p>Blocs are finite-state machines that receives events, manage them 
              and sends new events thanks their Bloc manager.<br>
              Some common blocs such as fifo or message forwarders are available.<br>
              A system is composed by a set of blocs exchanging messages. <br>
              New blocs are coded in C++, or graphicaly designed thanks a graphical 
              editor able to generate the C++ code.</p>
            <p>&nbsp; </p>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table width="100%" border="0">
  <tr> 
    <td> <b><font face="Arial, Helvetica, sans-serif"><br>
      <font size="4">III/ Distributed architecture</font></font></b></td>
  </tr>
  <tr> 
    <td> 
      <table width="100%" border="0">
        <tr> 
          <td width="4%"><img src="icon/pad.gif" width="1" height="1"></td>
          <td width="96%" valign="top" align="left"> 
            <p>For performance or design reasons some blocs should run in different 
              processes or on different hosts.<br>
            </p>
            <table width="100%" border="0">
              <tr valign="top"> 
                <td>This can be easily done thanks :<br>
                  - automatic message structure marshaller generation <br>
                  - communication between many Bloc managers.</td>
                <td align="right"><img src="icon/schemas_ditributed.png" width="387" height="211"></td>
              </tr>
            </table>
            <p>&nbsp;</p>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table width="100%" border="0">
  <tr> 
    <td> <b><font face="Arial, Helvetica, sans-serif"><br>
      <font size="4">IV/ Remote debug</font></font></b></td>
  </tr>
  <tr> 
    <td> 
      <table width="100%" border="0">
        <tr> 
          <td width="4%"><img src="icon/pad.gif" width="1" height="1"></td>
          <td width="96%" valign="top" align="left"> 
            <p>When the target system implements sockets, a remote debug at event 
              level can be done thanks the bloc manager interface.</p>
            <table width="100%" border="0">
              <tr>
                <td valign="top">&nbsp; </td>
                <td valign="top" align="right"><img src="icon/schemas_remote_debug.png" width="332" height="211"></td>
              </tr>
            </table>
            <p>&nbsp;</p>
            <p>&nbsp;</p>
            <p>&nbsp;</p>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<p></p>
<p></p>
<p><b><font face="Arial, Helvetica, sans-serif"> </font></b> </p>
</body>
</html>
