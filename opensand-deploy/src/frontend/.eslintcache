[{"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/utils/routes.tsx":"1","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/reportWebVitals.ts":"2","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/xsd/parser.ts":"3","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/api/index.ts":"4","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/xsd/model.tsx":"5","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/utils/theme.ts":"6","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Model/Model.tsx":"7","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Model/Component.tsx":"8","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Model/List.tsx":"9","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/index.tsx":"10","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Model/Parameter.tsx":"11","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Model/SingleListComponent.tsx":"12","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/xsd/serialiser.ts":"13","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/common/SingleFieldDialog.tsx":"14","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/common/Template.tsx":"15","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/common/NotFound.tsx":"16","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/HomePage/ProjectCard.tsx":"17","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/HomePage/Projects.tsx":"18","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/HomePage/CreateProjectButton.tsx":"19","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Project/Templates.tsx":"20","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Model/Editor.tsx":"21","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Project/Project.tsx":"22","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Project/Entities.tsx":"23","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Project/Parameter.tsx":"24","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Project/List.tsx":"25","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Project/Component.tsx":"26"},{"size":787,"mtime":1612347196126,"results":"27","hashOfConfig":"28"},{"size":425,"mtime":1611065154176,"results":"29","hashOfConfig":"28"},{"size":10423,"mtime":1612457387606,"results":"30","hashOfConfig":"28"},{"size":8313,"mtime":1612368812053,"results":"31","hashOfConfig":"28"},{"size":9563,"mtime":1612463187096,"results":"32","hashOfConfig":"28"},{"size":1621,"mtime":1612446268568,"results":"33","hashOfConfig":"28"},{"size":5372,"mtime":1612385975917,"results":"34","hashOfConfig":"28"},{"size":3223,"mtime":1611940064507,"results":"35","hashOfConfig":"28"},{"size":5167,"mtime":1611940610111,"results":"36","hashOfConfig":"28"},{"size":997,"mtime":1611760909266,"results":"37","hashOfConfig":"28"},{"size":8918,"mtime":1612446320658,"results":"38","hashOfConfig":"28"},{"size":3364,"mtime":1611760901676,"results":"39","hashOfConfig":"28"},{"size":936,"mtime":1611939958514,"results":"40","hashOfConfig":"28"},{"size":2275,"mtime":1612434053748,"results":"41","hashOfConfig":"28"},{"size":1562,"mtime":1612191181029,"results":"42","hashOfConfig":"28"},{"size":424,"mtime":1612191522918,"results":"43","hashOfConfig":"28"},{"size":1601,"mtime":1612432613342,"results":"44","hashOfConfig":"28"},{"size":1891,"mtime":1612431181212,"results":"45","hashOfConfig":"28"},{"size":2282,"mtime":1612430358675,"results":"46","hashOfConfig":"28"},{"size":8373,"mtime":1612430419478,"results":"47","hashOfConfig":"28"},{"size":1956,"mtime":1612430515428,"results":"48","hashOfConfig":"28"},{"size":2022,"mtime":1612454500787,"results":"49","hashOfConfig":"28"},{"size":1971,"mtime":1612463844839,"results":"50","hashOfConfig":"28"},{"size":5158,"mtime":1612463697447,"results":"51","hashOfConfig":"28"},{"size":5569,"mtime":1612462994952,"results":"52","hashOfConfig":"28"},{"size":3164,"mtime":1612463015432,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hxfex8",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/utils/routes.tsx",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/reportWebVitals.ts",[],["109","110"],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/xsd/parser.ts",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/api/index.ts",[],["111","112"],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/xsd/model.tsx",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/utils/theme.ts",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Model/Model.tsx",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Model/Component.tsx",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Model/List.tsx",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/index.tsx",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Model/Parameter.tsx",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Model/SingleListComponent.tsx",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/xsd/serialiser.ts",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/common/SingleFieldDialog.tsx",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/common/Template.tsx",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/common/NotFound.tsx",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/HomePage/ProjectCard.tsx",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/HomePage/Projects.tsx",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/HomePage/CreateProjectButton.tsx",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Project/Templates.tsx",["113"],"import React from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport Box from \"@material-ui/core/Box\";\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from \"@material-ui/core/Typography\";\n\nimport AddIcon from '@material-ui/icons/AddCircleOutline';\nimport DeleteIcon from '@material-ui/icons/HighlightOff';\nimport EditIcon from '@material-ui/icons/Edit';\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nimport {listProjectTemplates, deleteProjectTemplate, ITemplatesContent} from '../../api';\nimport {componentStyles} from '../../utils/theme';\nimport {Model, Component, Parameter, Enum} from '../../xsd/model';\n\nimport SingleFieldDialog from '../common/SingleFieldDialog';\n\n\ninterface Props {\n    project: Model;\n}\n\n\ninterface TableProps {\n    template: string;\n    templates?: string[];\n    onCreate: (templateName: string) => void;\n    onEdit: (templateName: string) => void;\n    onRemove: (templateName: string) => void;\n}\n\ninterface RowProps {\n    templates?: string[];\n    onEdit: (templateName: string) => void;\n    onRemove: (templateName: string) => void;\n}\n\n\nconst TemplatesTableBody = (props: RowProps) => {\n    const {onEdit, onRemove} = props;\n    const templates = props.templates || [];\n\n    return (\n        <TableBody>\n            {templates.map((templateFile: string, i: number) => (\n                <TableRow key={i}>\n                    <TableCell align=\"left\">\n                        <IconButton size=\"small\" onClick={onEdit.bind(this, templateFile)}>\n                            <EditIcon />\n                        </IconButton>\n                    </TableCell>\n                    <TableCell align=\"center\">\n                        {templateFile}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                        <IconButton size=\"small\" onClick={onRemove.bind(this, templateFile)}>\n                            <DeleteIcon />\n                        </IconButton>\n                    </TableCell>\n                </TableRow>\n            ))}\n        </TableBody>\n    );\n};\n\n\nconst TemplatesTable = (props: TableProps) => {\n    const {template, templates, onCreate, onEdit, onRemove} = props;\n\n    const [open, setOpen] = React.useState<boolean>(false);\n    const classes = componentStyles();\n\n    const handleOpen = React.useCallback(() => {\n        setOpen(true);\n    }, [setOpen]);\n\n    const handleClose = React.useCallback(() => {\n        setOpen(false);\n    }, [setOpen]);\n\n/* FIXME: see addTemplate below\n    const handleCreate = React.useCallback((name: string) => {\n        setOpen(false);\n        onCreate(name.endsWith(\".xml\") ? name : name + \".xml\");\n    }, [setOpen, onCreate]);\n*/\n    const handleCreate = React.useCallback((name: string) => {\n        setOpen(false);\n        onEdit(name.endsWith(\".xml\") ? name : name + \".xml\");\n    }, [setOpen, onEdit]);\n\n    return (\n        <Accordion defaultExpanded={false}>\n            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                <Typography className={classes.heading}>{template}</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n                <TableContainer>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell align=\"left\" />\n                                <TableCell align=\"center\">\n                                    Template Name\n                                </TableCell>\n                                <TableCell align=\"right\">\n                                    <IconButton size=\"small\" onClick={handleOpen}>\n                                        <AddIcon />\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TemplatesTableBody templates={templates} onEdit={onEdit} onRemove={onRemove}/>\n                    </Table>\n                </TableContainer>\n                <SingleFieldDialog\n                    open={open}\n                    title={`New ${template} Template`}\n                    description=\"Please enter the name of your new template.\"\n                    fieldLabel=\"Template Name\"\n                    onValidate={handleCreate}\n                    onClose={handleClose}\n                />\n            </AccordionDetails>\n        </Accordion>\n    );\n};\n\n\nconst Templates = (props: Props) => {\n    const projectComponent = props.project.root.children.find((c: Component) => c.id === \"project\");\n    const projectName = projectComponent?.parameters.find((p: Parameter) => p.id === \"name\")?.value;\n\n    const templateTypes = props.project.environment.enums;\n    const [templates, setTemplates] = React.useState<ITemplatesContent>({});\n    const classes = componentStyles();\n    const history = useHistory();\n\n    /* FIXME: should we keep this or only use `editTemplate` */\n    const addTemplate = React.useCallback((templateFile: string, templateName: string) => {\n        const templateNames = templates.hasOwnProperty(templateFile)\n            ? [...templates[templateFile], templateName]\n            : [templateName];\n        setTemplates({...templates, [templateFile]: templateNames});\n    }, [setTemplates, templates]);\n\n    const removeTemplate = React.useCallback((templateFile: string, templateName: string) => {\n        if (templates.hasOwnProperty(templateFile)) {\n            const templateNames = templates[templateFile].filter((name: string) => name !== templateName);\n            setTemplates({...templates, [templateFile]: templateNames});\n        }\n        if (projectName != null) {\n            deleteProjectTemplate(console.log, console.log, projectName, templateFile, templateName);\n        }\n    }, [setTemplates, templates, projectName]);\n\n    const editTemplate = React.useCallback((templateFile: string, templateName: string) => {\n        if (projectName != null) {\n            history.push({\n                pathname: \"/edit/\" + projectName,\n                search: \"?url=template/\" + templateFile + \"/\" + templateName + \"&xsd=\" + templateFile,\n            });\n        }\n    }, [history, projectName]);\n\n    React.useEffect(() => {\n        if (projectName != null) {\n            listProjectTemplates(setTemplates, console.log, projectName);\n        }\n        return () => {setTemplates({});};\n    }, [setTemplates, projectName]);\n\n    return (\n        <Paper elevation={0} className={classes.root}>\n            {templateTypes.map((e: Enum, i: number) => (\n                <Accordion key={i} defaultExpanded={true}>\n                    <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography className={classes.heading}>{e.name}</Typography>\n                        <Typography className={classes.secondaryHeading}>{e.description}</Typography>\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <Box width=\"100%\">\n                            {e.values.filter(v => v !== \"\").map((templateName: string, i: number) => (\n                                <TemplatesTable\n                                    key={i}\n                                    template={templateName}\n                                    templates={templates[templateName]}\n                                    onCreate={addTemplate.bind(this, templateName)}\n                                    onEdit={editTemplate.bind(this, templateName)}\n                                    onRemove={removeTemplate.bind(this, templateName)}\n                                />\n                            ))}\n                        </Box>\n                    </AccordionDetails>\n                </Accordion>\n            ))}\n        </Paper>\n    );\n};\n\n\nexport default Templates;\n","/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Model/Editor.tsx",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Project/Project.tsx",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Project/Entities.tsx",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Project/Parameter.tsx",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Project/List.tsx",[],"/home/mettinger/OpenSAND/opensand/opensand-deploy/src/frontend/src/components/Project/Component.tsx",[],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"114","replacedBy":"118"},{"ruleId":"116","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":79,"column":33,"nodeType":"122","messageId":"123","endLine":79,"endColumn":41},"no-native-reassign",["124"],"no-negated-in-lhs",["125"],["124"],["125"],"@typescript-eslint/no-unused-vars","'onCreate' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]