<html>
<head>
<title>Document sans-titre</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body bgcolor="#FFFFFF">
<table width="100%" border="0">
  <tr bgcolor="#52799e"> 
    <td><img src="icon/small_tri_right.gif" width="15" height="14"><font face="Arial, Helvetica, sans-serif"><b><font color="#FFFFFF">Exemple: 
      Messages exchange between two blocs</font></b></font></td>
  </tr>
</table>
<table width="100%" border="0">
  <tr>
    <td><b><font face="Arial, Helvetica, sans-serif"><br>
      </font></b></td>
  </tr>
  <tr>
    <td>
      <table width="100%" border="0">
        <tr>
          <td width="4%"><img src="icon/pad.gif" width="1" height="1"></td>
          <td width="96%" valign="top" align="left"> 
            <p>A simple exemple of message exchanges between two blocs with a 
              lot of comments...</p>
            <p><br>
              First of all on declares two new classes that derivate from mgl_bloc 
              class:<br>
              - the sender send three differents messages:</p>
            <blockquote>
              <p>- message 1 has no body, only a type<br>
                - message 2 has a body containing a variable size null terminated 
                string<br>
                - massage 3 sends a pointer to a dynamically allocated memory.</p>
            </blockquote>
            <p>- the receiver is ready to receive any of the three messages.</p>
            <p> Then, in the main() function, one instanciates an Event manager, 
              a Bloc manager and one instance of each blocs assigned to the bloc 
              manager, before starting the main loop.<br>
              Hope you like.</p>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table width="100%" border="0">
  <tr> 
    <td> <b><font face="Arial, Helvetica, sans-serif"><br>
      <font size="4">I/ Source code</font></font></b></td>
  </tr>
  <tr> 
    <td> 
      <table width="100%" border="0">
        <tr> 
          <td width="4%"><img src="icon/pad.gif" width="1" height="1"></td>
          <td width="96%" valign="top" align="left" bordercolor="#00FF00"> 
            <p>&nbsp;</p>
            <table width="100%" border="0" bordercolor="#000000" bgcolor="#CCCCCC">
              <tr bordercolor="#FF0099" bgcolor="#FFFFFF"> 
                <td> 
                  <p> <br>
                    /****** System Includes ******/<br>
                    #include &lt;stdlib.h&gt;<br>
                    #include &lt;string.h&gt;</p>
                  <p>/****** Application Includes ******/<br>
                    #include &quot;mgl_eventmgr.h&quot;<br>
                    #include &quot;mgl_bloc.h&quot;<br>
                    #include &quot;mgl_blocmgr.h&quot;</p>
                  <p><b>// One declares here, two global variables that contain 
                    the id of the blocs<br>
                    // They are used to send messages</b><br>
                    mgl_id g_id_1;<br>
                    mgl_id g_id_2;</p>
                  <p><b>// One declares her three types of messages to be sent.<i><br>
                    </i></b>#define MSG_TEST_TYPE_1 1<br>
                    #define MSG_TEST_TYPE_2 2<br>
                    #define MSG_TEST_TYPE_3 3</p>
                  <p><b>// Blocs heritate from mgl_bloc classe<br>
                    // mgl_bloc classe defines some default handlers such as 'onEvent'<br>
                    // Here, BlockSend classe set a timer, then send two messages 
                    on timer</b><br>
                    class BlockSend: public mgl_bloc {;</p>
                  <blockquote> 
                    <p> public:<br>
                      <b>// Class constructor</b><br>
                      <b>// Use mgl_bloc default constructor</b><br>
                      BlockSend(mgl_blocmgr *ip_blocmgr, mgl_id i_fatherid, char 
                      *ip_name):mgl_bloc(ip_blocmgr, i_fatherid, ip_name) { };</p>
                    <p> <b>//Event handlers</b><br>
                      mgl_status onEvent(mgl_event *ip_event) { </p>
                    <blockquote> 
                      <p><font size="1"> </font><br>
                        static mgl_id l_timer; // Store the timer id<br>
                        mgl_msg *lp_msg;<br>
                        char l_buf[]=&quot;Hello world&quot;;<br>
                        int l_len;<br>
                        char *lp_ptr;</p>
                      <p> <b>// The first event received by each bloc is : mgl_event_type_init<br>
                        // It simply set a timer<br>
                        </b>if (MGL_EVENT_IS_INIT(ip_event)) {</p>
                      <blockquote> 
                        <p><br>
                          printf(&quot;BlockSend Ready\n&quot;);<br>
                          setTimer(l_timer, 1000); <br>
                          printf(&quot;Timer set\n&quot;);<br>
                          return mgl_ok;</p>
                      </blockquote>
                      <p>}</p>
                      <p> <b>// Receive a Timer event</b><br>
                        if (MGL_EVENT_IS_TIMER(ip_event)) {</p>
                      <blockquote> 
                        <p><b>// Check this timer is the correct one</b><br>
                          if (MGL_EVENT_TIMER_IS_TIMER(ip_event, l_timer)) {</p>
                        <blockquote> 
                          <p><br>
                            printf(&quot;Timer received\n&quot;);</p>
                          <p> <b>// Send msg1: Msg type=MSG_TEST_TYPE_1, no body</b><br>
                            <b>// Quite easy, not ?</b><br>
                            lp_msg = newMsg(MSG_TEST_TYPE_1); <br>
                            sendMsgTo(g_id_2, lp_msg); // Send to bloc2<br>
                            printf(&quot;Msg 1 sent\n&quot;);</p>
                          <p> <b>// Send msg2: Msg type=MSG_TEST_TYPE_2, body 
                            contains a char buffer<br>
                            // The buffer is allocated, then memcopied from bloc 
                            buffer into message<br>
                            // This is the safer way to manage messages but it 
                            is not optimised <br>
                            // for fast data exchange (lot of memcopy and malloc).</b><br>
                            l_len = strlen(l_buf)+1; // Include last \0<br>
                            lp_msg = newMsg(MSG_TEST_TYPE_2, l_buf, l_len); <br>
                            sendMsgTo(g_id_2, lp_msg); // Send to bloc2<br>
                            printf(&quot;Msg 2 sent\n&quot;);</p>
                          <p> <b>// Send msg3: Msg type=MSG_TEST_TYPE, body constains 
                            a pointer to a buffer<br>
                            // No memcopy is done, memory is allocated by the 
                            sender, and only a<br>
                            // pointer is sent to the receiver.<br>
                            // This is faster, but be very carrefull with pointer 
                            management and memory<br>
                            // allocation, especially with distributed process 
                            and threads.</b><br>
                            lp_ptr = (char *)malloc(150);<br>
                            sprintf(lp_ptr, &quot;Msg body contains only a pointer.&quot;);<br>
                            lp_msg = newMsgWithBodyPtr(MSG_TEST_TYPE_3, lp_ptr); 
                            <br>
                            sendMsgTo(g_id_2, lp_msg); // Send to bloc2<br>
                            printf(&quot;Msg 2 sent\n&quot;);</p>
                          <p> <b>// Set the timer again</b><br>
                            setTimer(l_timer, 1000, mgl_true); <br>
                            return mgl_ok;</p>
                        </blockquote>
                        <p><br>
                          };</p>
                      </blockquote>
                      <p><br>
                        }<br>
                        return mgl_ok; </p>
                    </blockquote>
                    <p><br>
                      };</p>
                  </blockquote>
                  <p><br>
                    };</p>
                  <p><br>
                    <b>// Blocs heritate from mgl_bloc classe<br>
                    // mgl_bloc classe defines some default handlers such as 'onEvent'<br>
                    // Here, BlockReceive classe simply wait for messages</b><br>
                    class BlockReceive: public mgl_bloc {;</p>
                  <blockquote> 
                    <p><br>
                      public:<br>
                      <b>// Class constructor<br>
                      // Use mgl_bloc default constructor</b><br>
                      BlockReceive(mgl_blocmgr *ip_blocmgr, mgl_id i_fatherid, 
                      char *ip_name):mgl_bloc(ip_blocmgr, i_fatherid, ip_name) 
                      { };</p>
                    <p> <b>//Event handlers</b><br>
                      mgl_status onEvent(mgl_event *ip_event) { </p>
                    <blockquote> 
                      <p>char *lp_ptr;<br>
                      </p>
                      <p> <b>// Init, nothing to do</b><br>
                        if (MGL_EVENT_IS_INIT(ip_event)) {<br>
                        printf(&quot;BlockReceive Ready\n&quot;);<br>
                        return mgl_ok;<br>
                        }</p>
                      <p> <b>// Receive a message</b><br>
                        if (MGL_EVENT_IS_MSG(ip_event)) {</p>
                      <blockquote> 
                        <p> <b>// Msg type 1</b><br>
                          if (MGL_EVENT_MSG_IS_TYPE(ip_event, MSG_TEST_TYPE_1)) 
                          {<br>
                          printf(&quot;Received Msg 1\n&quot;);<br>
                          return mgl_ok;<br>
                          }</p>
                        <p> <b>// Msg type 2</b><br>
                          if (MGL_EVENT_MSG_IS_TYPE(ip_event, MSG_TEST_TYPE_2)) 
                          {<br>
                          printf(&quot;Received Msg 2 [%s]\n&quot;, ip_event-&gt;event.msg.ptr-&gt;pBuf);<br>
                          return mgl_ok;<br>
                          }</p>
                        <p> <b>// Msg type 3</b><br>
                          if (MGL_EVENT_MSG_IS_TYPE(ip_event, MSG_TEST_TYPE_3)) 
                          {<br>
                          lp_ptr = (char *)(ip_event-&gt;event.msg.ptr-&gt;pBuf);<br>
                          printf(&quot;Received Msg 3 [%s]\n&quot;, lp_ptr);<br>
                          free(lp_ptr);<br>
                          return mgl_ok;<br>
                          }</p>
                      </blockquote>
                      <p> }<br>
                        return mgl_ok; </p>
                    </blockquote>
                    <p><br>
                      };</p>
                  </blockquote>
                  <p>};<br>
                  </p>
                  <p>&nbsp; </p>
                  <p><b>// The main program</b><br>
                    void main()<br>
                    {</p>
                  <blockquote>
                    <p><br>
                      <b>// First of all instanciate an event manager.<br>
                      // Event manager manages time (real, compressed, event based), 
                      message files, sockets...</b><br>
                      mgl_eventmgr l_eventmgr(realTime);</p>
                    <p> <b>// Then instanciate a bloc manager.<br>
                      // A bloc manager manages bloc lists and solve message routing 
                      between blocs.</b><br>
                      mgl_blocmgr l_blocmgr;</p>
                    <p> <b>// Set Runtime Trace level</b><br>
                      MGL_TRACE_SET_LEVEL(0);</p>
                    <p> <b>// Set event Mgr to Bloc manager</b><br>
                      l_blocmgr.setEventMgr(&amp;l_eventmgr);</p>
                    <p><br>
                      <b>// Instancitate blocs<br>
                      // Each bloc register itself and could instanciate some 
                      subblocs<br>
                      // A unique Id is set for each bloc when registering<br>
                      // This id is used here to send messages to blocs.</b><br>
                      mgl_bloc *lp_bloc1 = new BlockSend(&amp;l_blocmgr, 0/* 0 
                      means no father*/, &quot;BlockSend&quot;);<br>
                      g_id_1 = lp_bloc1-&gt;getId();</p>
                    <p> mgl_bloc *lp_bloc2 = new BlockReceive(&amp;l_blocmgr, 
                      0/* 0 means no father*/, &quot;BlockReceive&quot;);<br>
                      g_id_2 = lp_bloc2-&gt;getId();</p>
                    <p> <b>// Now, each system bloc is registered, got an Id, 
                      <br>
                      // has registered its links, and know wether it must run 
                      localy or remotly<br>
                      // Set the eventMgr for localy managed blocs</b><br>
                      mgl_status l_ret = l_blocmgr.setEventMgrToLocallyManagedBlocs();</p>
                    <p> <b>// Let's run...</b><br>
                      for (;;) {<br>
                      l_ret = l_blocmgr.process_step();<br>
                      }</p>
                  </blockquote>
                  <p>}</p>
                  <p>&nbsp; </p>
                </td>
              </tr>
            </table>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table width="100%" border="0">
  <tr> 
    <td> <b><font face="Arial, Helvetica, sans-serif"><br>
      <font size="4">II/ Compiling</font></font></b></td>
  </tr>
  <tr> 
    <td> 
      <table width="100%" border="0">
        <tr> 
          <td width="4%"><img src="icon/pad.gif" width="1" height="1"></td>
          <td width="96%" valign="top" align="left"> 
            <p><b><font face="Arial, Helvetica, sans-serif"><font size="4">1/ 
              Unix/Mingw</font></font></b><br>
            </p>
            <p>Compiling under linux is as simple as a right clicking, assuming 
              that $MARG is set to you margouilla directory patch.</p>
            <table width="100%" border="0" bordercolor="#000000" bgcolor="#CCCCCC">
              <tr bordercolor="#FF0099" bgcolor="#FFFFFF" valign="top"> 
                <td> 
                  <p> gcc -o test_bloc_msg test_bloc_msg.cpp -I$Marg/include -L$Marg/lib 
                    -lmarg_runtime</p>
                  </td>
              </tr>
            </table>
            <p><b><font face="Arial, Helvetica, sans-serif"><font size="4">2/ 
              Windows</font></font></b><br>
            </p>
            <p>Double-click on test_bloc_msg.dsp, Visual Studio C++ IDE should 
              open. Click on the 'Compile' button...</p>
            <p>&nbsp;</p>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table width="100%" border="0">
  <tr> 
    <td height="251"> <b><font face="Arial, Helvetica, sans-serif"><br>
      </font></b></td>
  </tr>
  <tr> 
    <td> 
      <table width="100%" border="0">
        <tr> 
          <td width="4%"><img src="icon/pad.gif" width="1" height="1"></td>
          <td width="96%" valign="top" align="left"> 
            <p>&nbsp;</p>
            <p>&nbsp;</p>
          </td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<p></p>
<p></p>
<p><b><font face="Arial, Helvetica, sans-serif"> </font></b> </p>
</body>
</html>
