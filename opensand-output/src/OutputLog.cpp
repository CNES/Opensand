/*
 *
 * OpenSAND is an emulation testbed aiming to represent in a cost effective way a
 * satellite telecommunication system for research and engineering activities.
 *
 *
 * Copyright Â© 2019 TAS
 *
 *
 * This file is part of the OpenSAND testbed.
 *
 *
 * OpenSAND is free software : you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see http://www.gnu.org/licenses/.
 *
 */

/**
 * @file OutputLog.cpp
 * @brief The OutputLog class represent a log generated by the application.
 * @author Fabrice Hobaya <fhobaya@toulouse.viveris.com>
 */


#include <cstdio>

#include "OutputLog.h"
#include "OutputHandler.h"


const char *OutputLog::levels[] =
{
  "[CRITICAL]",
  "[CRITICAL]",
  "[CRITICAL]",
  "[   ERROR]",
  "[ WARNING]",
  "[  NOTICE]",
  "[    INFO]",
  "[   DEBUG]",
  "",
  "",
  "",
};


OutputLog::OutputLog(log_level_t display_level, const std::string &name):
  name(name),
  display_level(display_level)
{
}


OutputLog::~OutputLog()
{
  handlers.clear();
}


log_level_t OutputLog::getDisplayLevel(void) const
{
  OutputLock acquire{lock};
  return this->display_level;
}


void OutputLog::setDisplayLevel(log_level_t level)
{
  OutputLock acquire{lock};
  this->display_level = level;
}


void OutputLog::addHandler(std::shared_ptr<LogHandler> handler)
{
  OutputLock acquire{lock};
  handlers.push_back(handler);
}


void OutputLog::sendLog(log_level_t log_level, const char* msg_format, ...) const
{
  std::va_list args;
  va_start(args, msg_format);
  vSendLog(log_level, msg_format, args);
  va_end(args);
}


void OutputLog::vSendLog(log_level_t log_level, const char* msg_format, va_list args) const
{
  if (log_level > display_level) {
    return;
  }

  std::string message = formatMessage(msg_format, args);

  const std::string level = levels[log_level];
  for (auto& handler : handlers) {
    handler->emitLog(name, level, message);
  }
}


std::string formatMessage(const char* name, std::va_list args)
{
  std::va_list args_copy;
  va_copy(args_copy, args);

  // Check size of the resulting string
  const int size = std::vsnprintf(nullptr, 0, name, args_copy);
  va_end(args_copy);

  if (size < 0) {
    return std::string();
  }

  std::vector<char> buffer(size + 1);
  std::vsnprintf(buffer.data(), buffer.size(), name, args);

  return std::string(buffer.data(), size);
}
