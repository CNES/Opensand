#!/bin/bash

MODULES='all libs core services lan encap'
USEROPTS=""

# Get list of all supported distributions
THIS_DIR="$(readlink -e $0)"
THIS_DIR="$(dirname ${THIS_DIR})"
DISTS=$(find $THIS_DIR -mindepth 1 -maxdepth 1 -type d -exec basename {} \;)
DISTS=$(echo $DISTS | tr -d '\n')

usage()
{
    echo 'Usage : build-pkgs [OPTIONS] -s <src path> -d <dst path> -t <dist> TARGET'
    echo 'Available TARGETS :   all:      build all packages (default)'
    echo '                      libs:     build only libraries packages'
    echo '                      core:     build only core packages'
    echo '                      services: build only services packages'
    echo '                      encap:    build only encapsulation plugins'
    echo '                      lan:      build only lan adaptation plugins'
    echo 'Available OPTIONS :   -i        install build-dependencies automatically'
    echo '                      -f        add a user flag to packages'
    echo 'List of available distributions:'
    echo $DISTS
    exit 1
}

make_libs()
{
    echo "Building OpenSAND libraries for $TARGET_DIST"
    # Package and install opensand-output
    $THIS_DIR/$TARGET_DIST/build-pkg $USEROPTS -s $SRC_DIR -d $DST_DIR $INSTALL_DEP -i opensand-output || error
    # Package and install opensand-old-conf
    $THIS_DIR/$TARGET_DIST/build-pkg $USEROPTS -s $SRC_DIR -d $DST_DIR $INSTALL_DEP -i opensand-old-conf || error
    # Package and install opensand-conf
    $THIS_DIR/$TARGET_DIST/build-pkg $USEROPTS -s $SRC_DIR -d $DST_DIR $INSTALL_DEP -i opensand-conf || error
    # Package and install opensand-rt
    $THIS_DIR/$TARGET_DIST/build-pkg $USEROPTS -s $SRC_DIR -d $DST_DIR $INSTALL_DEP -i opensand-rt || error
    echo "Finished building OpenSAND libraries for $TARGET_DIST"
}

make_core()
{
    echo "Building OpenSAND core for $TARGET_DIST"
    # Package and install opensand-core
    $THIS_DIR/$TARGET_DIST/build-pkg $USEROPTS -s $SRC_DIR -d $DST_DIR $INSTALL_DEP opensand-network
    $THIS_DIR/$TARGET_DIST/build-pkg $USEROPTS -s $SRC_DIR -d $DST_DIR $INSTALL_DEP -i opensand-core
    echo "Finished building OpenSAND core for $TARGET_DIST"
}

make_services()
{
    echo "Building OpenSAND services for $TARGET_DIST"
    # Package and install opensand-collector
    $THIS_DIR/$TARGET_DIST/build-pkg $USEROPTS -s $SRC_DIR -d $DST_DIR $INSTALL_DEP opensand-collector 
    # Package and install opensand-meta
    $THIS_DIR/$TARGET_DIST/build-pkg $USEROPTS -s $SRC_DIR -d $DST_DIR $INSTALL_DEP opensand-meta
    echo "Finished building OpenSAND services for $TARGET_DIST"
}

make_encap()
{
    echo "Building OpenSAND encapsulation plugins for $TARGET_DIST"
    # Package and install opensand-plugins/encapsulation/gse
    $THIS_DIR/$TARGET_DIST/build-pkg $USEROPTS -s $SRC_DIR -d $DST_DIR $INSTALL_DEP opensand-plugins/encapsulation/gse
    # Package and install opensand-plugins/encapsulation/rle
    $THIS_DIR/$TARGET_DIST/build-pkg $USEROPTS -s $SRC_DIR -d $DST_DIR $INSTALL_DEP opensand-plugins/encapsulation/rle
    echo "Finished building OpenSAND encapsulation plugins for $TARGET_DIST"
}

make_lan()
{
    echo "Building OpenSAND LAN adaptation plugins for $TARGET_DIST"
    # Package and install opensand-plugins/encapsulation/gse
    $THIS_DIR/$TARGET_DIST/build-pkg $USEROPTS -s $SRC_DIR -d $DST_DIR $INSTALL_DEP opensand-plugins/lan_adaptation/rohc
    echo "Finished building OpenSAND LAN adaptation plugins for $TARGET_DIST"
}

error()
{
    exit 1
}

success()
{
    echo "done."
}

clean()
{
    # Delete any remaining .deb or any files remaining from last packaging
    sudo rm -rf $DST_DIR/src/*
    sudo rm -rf $DST_DIR/pkgs/*
}

while getopts ":s:d:t:himf:" o; do
    case "${o}" in
        s)
            SRC_DIR=$(readlink -f $OPTARG)
            ;;
        d)
            DST_DIR=$(readlink -f $OPTARG)
            ;;
        t)
            TARGET_DIST=$OPTARG
            ;;
        i)
            INSTALL_DEP="-I"
            ;;
        f)
            if [ -z $OPTARG ]
            then
                echo "No user flag set!" && usage
            fi
            USEROPTS="$USEROPTS -f $OPTARG"
            ;;
        h)
            usage
            ;;
        *)
            if [ -z $OPTARG ]
            then
                echo "Invalid option \"${o}\"!"
            else
                echo "Invalid option \"${o} $OPTARG\"!"
            fi
            usage
            ;;
    esac
done
shift $((OPTIND-1))

# Ask sudo password
sudo echo -n ""

MODULE=$1

if [ -z $MODULE ];
then
    MODULE='all'
fi

# Show usage if module is not a valid option
if [[ ! " $MODULES " =~ " $MODULE " ]]
then
    echo "Invalid module!" && usage
fi

# Show usage if distribution is not a valid option
if [[ ! " $DISTS " =~ " $TARGET_DIST " ]]
then
    echo "Invalid distribution!" && usage
fi

# Check if valid source dir
if [ ! -d "$SRC_DIR" ]
then
    echo "Invalid source dir $SRC_DIR" && usage
fi

# Create dirs if they don't exist. Empty if they do.
mkdir -p $DST_DIR/src
mkdir -p $DST_DIR/pkgs
clean

case $MODULE in
    "all")
        make_libs
        make_core
        make_services
        make_encap
        make_lan
        ;;
    "libs")
        make_libs
        ;;
    "core")
        make_core
        ;;
    "services")
        make_services
        ;;
    "encap")
        make_encap
        ;;
    "lan")
        make_lan
        ;;
    *)
        ;;
esac

echo 'Finished packaging.'
