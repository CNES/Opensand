#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
#
# OpenSAND is an emulation testbed aiming to represent in a cost effective way a
# satellite telecommunication system for research and engineering activities.
#
#
# Copyright © 2019 TAS
#
#
# This file is part of the OpenSAND testbed.
#
#
# OpenSAND is free software : you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see http://www.gnu.org/licenses/.
#
#

"""
@file     opensand_network
@brief    Set up the network configuration to an OpenSAND entity.
@author   Aurélien DELRIEU <aurelien.delrieu@viveris.fr>
"""


import argparse
import opensand_core.opensand_network_utils as onu
import netifaces as ni
import ipaddress


def ipv4_address_netdigit(text):
    '''
    Check a text represents an IPv4 address and a net digit

    Args:
        text   text to check
    '''
    addr = ipaddress.ip_network(text, False)
    return text


def existing_iface(text):
    '''
    Check a text represents an existing interface

    Args:
        text   text to check
    '''
    if text not in ni.interfaces():
        raise ValueError('No "{}" interface'.format(text))
    return text


def udp_port(text):
    '''
    Check a text represents a UDP port

    Args:
        text   text to check
    '''
    value = int(text)
    if value <= 0:
        raise ValueError('UDP port must be strictly positive')
    return value


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Set up the network configuration to an OpenSAND entity',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    entity_cmd = parser.add_subparsers(
        dest='entity',
        metavar='entity',
        help='the OpenSAND entity type',
    )
    entity_cmd.required = True

    st_parser = entity_cmd.add_parser(
        'st',
        help='Satellite Terminal',
    )
    gw_parser = entity_cmd.add_parser(
        'gw',
        help='Gateway',
    )
    sat_parser = entity_cmd.add_parser(
        'sat',
        help='Satellite',
    )
    gw_net_acc_parser = entity_cmd.add_parser(
        'gw_net_acc',
        help='Gateway (network and access layers)',
    )
    gw_phy_parser = entity_cmd.add_parser(
        'gw_phy',
        help='Gateway (physical layer)',
    )

    for p in [ st_parser, gw_parser, gw_net_acc_parser, gw_phy_parser ]:
        p.add_argument(
            '-i',
            '--id',
            type=int,
            required=True,
            help='the OpenSAND entity identifier',
        )

    for p in [ st_parser, gw_parser, gw_net_acc_parser ]:
        p.add_argument(
            '-t',
            '--type',
            choices=onu.ALL_TYPES,
            default=onu.DEFAULT_TYPE,
            help='the type of the terrestrial network',
        )
        p.add_argument(
            '-n',
            '--net-iface',
            type=existing_iface,
            required=True,
            help='the terrestrial network interface',
        )
        p.add_argument(
            '--net-addr',
            type=ipv4_address_netdigit,
            default=None,
            help='the terrestrial network address (format: "ADDRESS/NET_DIGIT")',
        )

    for p in [ st_parser, gw_parser, gw_phy_parser, sat_parser ]:
        p.add_argument(
            '-e',
            '--emu-iface',
            type=existing_iface,
            required=True,
            help='the emulation interface',
        )
        p.add_argument(
            '-a',
            '--emu-addr',
            type=ipv4_address_netdigit,
            required=True,
            help='the emulation address (format: "ADDRESS/NET_DIGIT")',
        )

    for p in [ gw_net_acc_parser, gw_phy_parser ]:
        p.add_argument(
            '-o',
            '--interco-iface',
            type=existing_iface,
            required=True,
            help='the interconnection interface',
        )
        p.add_argument(
            '--interco-addr',
            type=ipv4_address_netdigit,
            required=True,
            help='the interconnection address (format: "ADDRESS/NET_DIGIT")',
        )

    for p in [ st_parser, gw_parser, gw_net_acc_parser ]:
        p.add_argument(
            '--int-addr',
            type=ipv4_address_netdigit,
            default=None,
            help='the internal address (format: "ADDRESS/NET_DIGIT")',
        )

    for p in [ st_parser, gw_parser, gw_net_acc_parser, gw_phy_parser, sat_parser ]:
        p.add_argument(
            '-r',
            '--revert',
            action='store_false',
            dest='configure',
            help='revert the current network configuration',
        )

    args = parser.parse_args()
    if args.entity == 'sat':
        onu.host_sat(
            args.entity,
            args.emu_iface,
            args.emu_addr,
            args.configure,
        )

    elif args.entity in [ 'gw', 'st' ]:
        if args.type == onu.IP_TYPE:
            onu.host_ground_ip(
                '{}{}'.format(args.entity, args.id),
                args.emu_iface,
                args.net_iface,
                args.emu_addr,
                args.net_addr,
                args.int_addr,
                args.configure,
            )

        elif args.type == onu.ETH_TYPE:
            onu.host_ground_eth(
                '{}{}'.format(args.entity, args.id),
                args.emu_iface,
                args.net_iface,
                args.emu_addr,
                args.configure,
            )

        else:
            raise ValueError('Unexpected type value "{}"'.format(args.type))

    elif args.entity == 'gw_net_acc':
        if args.type == onu.IP_TYPE:
            onu.host_ground_net_acc_ip(
                '{}{}'.format(args.entity, args.id),
                args.interco_iface,
                args.net_iface,
                args.interco_addr,
                args.net_addr,
                args.int_addr,
                args.configure,
            )

        elif args.type == onu.ETH_TYPE:
            onu.host_ground_net_acc_eth(
                '{}{}'.format(args.entity, args.id),
                args.interco_iface,
                args.net_iface,
                args.interco_addr,
                args.configure,
            )

        else:
            raise ValueError('Unexpected type value "{}"'.format(args.type))

    elif args.entity == 'gw_phy':
        onu.host_ground_phy(
            '{}{}'.format(args.entity, args.id),
            args.emu_iface,
            args.interco_iface,
            args.emu_addr,
            args.interco_addr,
            args.configure,
        )
